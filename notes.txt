*Factory-Constructor pattern - parametrized class instantiation*  
A pair of a factory and a custom constructor performs parametrized class instantiation. The default factory *Create* and the default constructor *Init* are defined on the class's default interface only. Both methods have the same parameter signature but different return values. The Factory method should be a function returning a class instance, and the Constructor method should be a sub with no return value. The factory method called on the default (predeclared) class's instance (enabled via the "Predeclared" attribute) generates a new class instance (via the New operator) and then, to perform initialization, calls instance's constructor with all received arguments. To simulate rudimentary introspection, *Class* and *Self* getters can also be defined. The *Class* getter returns the class's default instance. If a class instance presents a non-default interface, *Self* should return it as well.

Special consideration should be given to the returned value. Typically, a class's factory should return an instance of that class. Further, if the class implements an interface, it is customarily to define the factory's return type as an instance of such an interface. *Abstract factory pattern* may be used to encapsulate a group of classes implementing the same interface. *CreateInstance* method of an abstract factory should call a concrete factory of the selected class, so the *CreateInstance* method and individual concrete factories should return an instance of the interface class.

To extend a class implementing an interface, a second interface may be added to preserve backward compatibility. If the abstract factory pattern is not used, the default factory may return the default class interface, while the desired interface is selected by the calling code. 

What happens if the class implements multiple interfaces? Multiple interfaces can be used to extend the functionality of a class programmed against an interface while retaining backward compatibility.